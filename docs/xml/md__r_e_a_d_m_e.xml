<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="md__r_e_a_d_m_e" kind="page">
    <compoundname>md_README</compoundname>
    <title>First Assignment of Research Trach 2 course - action branch</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md1">
<title>List of required packages</title>
<para><ulink url="http://wiki.ros.org/actionlib">Actionlib</ulink> is a package that allows to implements an action server. Action differently to service aren&apos;t instantaneous but that have a duration in time. Action client has the possibility to get some feedback when action is happening and cancel the action before the conclusion if needed. The action is defined as a file *.action* inside a folder <emphasis>Action</emphasis> contained in the package.</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md2">
<title>System description</title>
<para>The overall behaviour of the system is the same of the main branch. The main difference of this branch is that <bold><ref refid="namespacego__to__point" kindref="compound">go_to_point</ref></bold> node has been implemented as an action server whereas the <bold>state_machine</bold> and <bold><ref refid="namespaceuser__interface" kindref="compound">user_interface</ref></bold> are action clients.</para>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md3">
<title>Action folder</title>
<para>It contains the definition of the implented action. The goal is the position that robot has to reach, the result is a boolean variable whereas the the feedback is the actual position of the robot.</para>
<para><orderedlist>
<listitem><para><ulink url="https://github.com/AliceNardelli/rt2_assignment1/blob/action/action/GoalReaching.action"><bold>GoalReaching</bold></ulink></para>
</listitem></orderedlist>
</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md4">
<title>Srv folder</title>
<para>The two service messages are defined as in branch main</para>
<para><orderedlist>
<listitem><para><ulink url="https://github.com/AliceNardelli/rt2_assignment1/blob/action/srv/RandomPosition.srv"><bold>RandomPosition</bold></ulink></para>
</listitem><listitem><para><ulink url="https://github.com/AliceNardelli/rt2_assignment1/blob/action/srv/Command.srv"><bold>Command</bold></ulink></para>
</listitem></orderedlist>
</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md5">
<title>Urdf folder</title>
<para>It contains the description of the world and of the robot.</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md6">
<title>launch folder</title>
<para>It contains the launch file to launch <ulink url="https://github.com/AliceNardelli/rt2_assignment1/blob/action/launch/sim.launch"><bold>sim.launch</bold></ulink> the overall simulation.</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md7">
<title>src folder</title>
<para>Inside this folder there are the c++ code files.</para>
<para><orderedlist>
<listitem><para><ulink url="https://github.com/AliceNardelli/rt2_assignment1/blob/action/src/position_service.cpp"><bold>position_service.cpp</bold></ulink>: the implementation of this node is the same of the of the one in the main branch</para>
</listitem></orderedlist>
<orderedlist>
<listitem><para><ulink url="https://github.com/AliceNardelli/rt2_assignment1/blob/action/src/state_machine.cpp"><bold>state_machine.cpp</bold></ulink>: the structure of the code of this node has been maintained the same of the one in the branch main. The only difference is that instead of a service client of */go_to_point* here has been implemented a action client of */go_to_point*. It send a goal position to the action server and wait since robot reaches this position.</para>
</listitem></orderedlist>
</para>
</sect2>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md8">
<title>scripts folder</title>
<para><orderedlist>
<listitem><para><ulink url="https://github.com/AliceNardelli/rt2_assignment1/blob/action/scripts/go_to_point.py"><bold>go_to_point.py</bold></ulink>: this is an action server node that implements the reaching point behaviour. The node has been structured as a class and the server is an object of the class ActionController. Inside the constructor of the class the action server is defined. I would like to emphasize the role of the callback of the action server. As the fact that it implements the machine state of this node and control the overall behaviour when robot is moving. In particular through the structure of the action it is possible to continuosly publish as feedback the actual position of the robot.</para>
</listitem><listitem><para><ulink url="https://github.com/AliceNardelli/rt2_assignment1/blob/action/scripts/user_interface.py"><bold>user_interface.py</bold></ulink>: this node implements the user interface, the only difference with the main is that there is defined an action client of GoalReachingAction in such a way to cancel the goal if the user press 0 even if the goal has not been already reached. When the action is canceled the robot is stop instantanously through a Twist message.</para>
</listitem></orderedlist>
</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md9">
<title>How to run the code</title>
<para>To run the code is necessary to run this line of code:</para>
<para><programlisting><codeline><highlight class="normal">roslaunch<sp/>rt2_assignment1<sp/>sim.launch</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
